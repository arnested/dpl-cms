<?php

/**
 * @file
 * Novel Theme.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use function Safe\file_get_contents;
use function Safe\sort;
use function Safe\sprintf;

/**
 * Implements hook_theme().
 *
 * @param mixed[] $existing
 *   An array of existing implementations that may be used
 *   for override purposes.
 * @param string $type
 *   Whether a theme, module, etc. is being processed.
 * @param string $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param string $path
 *   The directory path of the theme or module,
 *   so that it doesn't need to be looked up.
 *
 * @return mixed[]
 *   An associative array of information about theme implementations.
 */
function novel_theme(
  array $existing,
  string $type,
  string $theme,
  string $path
): array {
  return [
    'search_result_item' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app__search_header(array &$variables): void {
  $search_svg = file_get_contents(sprintf('%s/%s',
    \Drupal::theme()->getActiveTheme()->getPath(),
    '/assets/dpl-design-system/icons/collection/Search.svg'
  ));

  $variables += [
    'search_icon' => $search_svg,
    'search_action' => $variables['data']['search-url'] ?? "",
    'input_placeholder_text' => $variables['data']['input-placeholder-text'] ?? "",
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app__search_result(array &$variables): void {
  $q = \Drupal::request()->query->get('q') ?? "";
  $loading_text = (string) ($variables['data']['showing-results-for-text'] ?? "");
  // We deliberately do not use the translation API here.
  // The text data prop has already been translated
  // and now we need to replace the placeholder.
  $showing_results_for_text = (
    // We have already translated the string in the react app.
    // phpcs:ignore Drupal.Semantics.FunctionT.NotLiteralString
    new TranslatableMarkup($loading_text, ['@query' => $q])
  )->__toString();

  $variables += [
    'showing_results_for_text' => $showing_results_for_text,
    'number_of_fake_result_items' => 5,
  ];

  // Make sure that the app is re-rendered when the query string changes.
  // That enables us to vary the "searching" title line.
  $variables['#cache']['contexts'][] = "url.query_args:q";
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 *
 * Preprocesses variables for node templates.
 *
 * Includes generating ticket pricing display in 'event_list_teaser' view mode.
 *
 * @param mixed[] $variables
 *   The variables array for the node template.
 *
 * @throws \Safe\Exceptions\ArrayException
 */
function novel_preprocess_node(array &$variables):void {
  if ($variables['node']->hasField('field_ticket_categories')) {
    $ticket_categories = $variables['node']->get('field_ticket_categories')->referencedEntities();
    $prices = [];

    // Collect prices from ticket categories.
    foreach ($ticket_categories as $category) {
      if ($category->hasField('field_ticket_category_price') && !$category->get('field_ticket_category_price')->isEmpty()) {
        $price = $category->get('field_ticket_category_price')->value;
        $prices[] = (floatval($price) == intval($price)) ? intval($price) : floatval($price);
      }
    }

    $variables['ticket_price_display'] = novel_get_ticket_price_display($prices);
  }
}

/**
 * Helper function to format the price display string.
 *
 * @param float[] $prices
 *   Array of price values from ticket categories.
 *
 * @return string
 *   Formatted price display string.
 *
 * @throws \Safe\Exceptions\ArrayException
 */
function novel_get_ticket_price_display(array $prices): string {
  sort($prices);
  $price_display = '';

  if (empty($prices) || (count($prices) === 1 && $prices[0] == 0)) {
    $price_display = 'Gratis';
  }
  else {
    $has_free_price = in_array(0, $prices);
    $filtered_prices = array_filter($prices, fn($price) => $price > 0);

    if ($has_free_price && !empty($filtered_prices)) {
      $highest_price = max($filtered_prices);
      $price_display = 'Gratis - ' . $highest_price . ' KR';
    }
    elseif ($has_free_price) {
      $price_display = 'Gratis';
    }
    else {
      $lowest_price = min($filtered_prices);
      $highest_price = max($filtered_prices);
      $price_display = $lowest_price . ($lowest_price != $highest_price ? ' - ' . $highest_price : '') . ' KR';
    }
  }

  return $price_display;
}
