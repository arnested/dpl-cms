<?php

/**
 * @file
 * Base update hooks.
 *
 * These get run BEFORE config-import.
 * This is where you enable/disable modules, as core.extension.yml is in
 * config_ignore as library administrators can add their own modules.
 */

use Drupal\Core\Extension\ModuleInstallerInterface;
use Drupal\drupal_typed\DrupalTyped;
use Drupal\locale\SourceString;
use Drupal\locale\StringDatabaseStorage;
use Drupal\recurring_events\Entity\EventInstance;
use Drupal\recurring_events\Entity\EventSeries;

/**
 * Helper function to install modules.
 *
 * @param string[] $modules
 *   The modules to install.
 *
 * @return string
 *   The feedback message.
 */
function _dpl_update_install_modules(array $modules): string {
  DrupalTyped::service(ModuleInstallerInterface::class, 'module_installer')->install($modules);
  $modules_string = implode(', ', $modules);
  return "Enabled modules: {$modules_string}.";
}

/**
 * Linking new field inheritances with existing eventinstances.
 *
 * There is a fault in field_inheritance, when you add new fields/inheritances,
 * it doesn't get updated on the old eventinstances until they get saved from
 * the form.
 * This is because the logic that links eventinstances and eventseries together
 * is set by field_inheritance directly in the form_alter and form_submit.
 * This helper function allows you to pass along a name of a field inherited
 * field that has been set up at /admin/structure/field_inheritance, and
 * the helper will find all eventinstances and make sure the new field is
 * linked together with the relevant eventseries.
 */
function _dpl_update_update_field_inheritance(string $field_inheritance_name): string {
  $ids =
    \Drupal::entityQuery('eventinstance')
      ->accessCheck(FALSE)
      ->execute();

  if (empty($ids) || is_int($ids)) {
    return 'No entities to update.';
  }

  $entities =
    \Drupal::entityTypeManager()->getStorage('eventinstance')->loadMultiple($ids);

  $count = 0;

  foreach ($entities as $entity) {
    try {
      if (!($entity instanceof EventInstance)) {
        throw new Exception('Entity is not an expected EventInstance.');
      }

      $event_series = $entity->getEventSeries();

      if (!($event_series instanceof EventSeries)) {
        throw new Exception('Entity parent is not an expected EventSeries.');
      }

      // This matches the key that is defined in field_inheritance.
      $state_key = $entity->getEntityTypeId() . ':' . $entity->uuid();
      $field_inheritance = \Drupal::keyValue('field_inheritance')->get($state_key);

      // In theory, an eventinstance could be set up to inherit from another
      // entity than the eventseries - but in practice, this is really unlikely,
      // and something we're willing to disregard.
      $field_inheritance[$field_inheritance_name] = [
        'entity' => $event_series->id(),
      ];

      \Drupal::keyValue('field_inheritance')->set($state_key, $field_inheritance);

      $entity->save();
      $count++;
    }
    catch (\Throwable $e) {
      \Drupal::logger('dpl_update')->error('Could not update field_inheritance on eventinstance @id - Error: @message', [
        '@message' => $e->getMessage(),
        '@id' => $entity->id(),
      ]);
    }
  }

  return "Updated $count eventinstances, linking field  '$field_inheritance_name' to inherit from eventseries.";
}

/**
 * Helper function, for adding translations.
 *
 * Generally speaking, this should be avoided, as it is DDF's responsibility
 * to add translations. That also means that this function may overwrite
 * translations made by DDF, or these translations may be overwritten in the
 * future.
 */
function _dpl_update_update_translation(string $english, string $danish, ?string $context = NULL): string {
  $translator = DrupalTyped::service(StringDatabaseStorage::class, 'locale.storage');

  $string = $translator->findString(['source' => $english]);

  if (is_null($string)) {
    $string = new SourceString();
    $string->setString($english);
    $string->setStorage($translator);
    $string->save();
  }

  $translator->createTranslation([
    'lid' => $string->lid,
    'language' => 'da',
    'translation' => $danish,
    'context' => $context,
  ])->save();

  return "'$english' has been translated to '$danish'";
}

/**
 * Run on the initial site setup.
 *
 * Remember to references to individual update hooks, as these updates probably
 * will want to happen both on new and existing sites.
 */
function dpl_update_install(): string {
  $messages[] = dpl_update_update_10001();
  $messages[] = dpl_update_update_10002();
  $messages[] = dpl_update_update_10003();
  $messages[] = dpl_update_update_10004();
  $messages[] = dpl_update_update_10005();
  $messages[] = dpl_update_update_10006();
  $messages[] = dpl_update_update_10008();
  $messages[] = dpl_update_update_10009();
  $messages[] = dpl_update_update_10011();
  $messages[] = dpl_update_update_10010();
  $messages[] = dpl_update_update_10012();
  $messages[] = dpl_update_update_10013();

  return implode('\r\n', $messages);
}

/**
 * Installing config_ignore_auto module.
 *
 * This is mostly here as an example for how to enable modules in the future.
 */
function dpl_update_update_10001(): string {
  return _dpl_update_install_modules(['config_ignore_auto']);
}

/**
 * Install collation_fixer module.
 */
function dpl_update_update_10002(): string {
  return _dpl_update_install_modules(['collation_fixer']);
}

/**
 * Installing config_perms module.
 */
function dpl_update_update_10003(): string {
  return _dpl_update_install_modules(['config_perms']);
}

/**
 * Installing dpl_filter_paragraphs and dpl_related_content modules.
 */
function dpl_update_update_10004(): string {
  return _dpl_update_install_modules(['dpl_filter_paragraphs', 'dpl_related_content']);
}

/**
 * Installing dpl_publication.
 */
function dpl_update_update_10005(): string {
  return _dpl_update_install_modules(['dpl_publication']);
}

/**
 * Installing verf module.
 */
function dpl_update_update_10006(): string {
  return _dpl_update_install_modules(['verf']);
}

/**
 * Link new event_ticket_capacity inheritance on eventinstances.
 */
function dpl_update_update_10007(): string {
  return _dpl_update_update_field_inheritance('event_ticket_capacity');
}

/**
 * Installing JSNLog module.
 */
function dpl_update_update_10008(): string {
  return _dpl_update_install_modules(['jsnlog']);
}

/**
 * Installing dpl_cookies.
 */
function dpl_update_update_10009(): string {
  return _dpl_update_install_modules(['dpl_cookies']);
}

/**
 * Uninstall the dpl_breadcrumb_example module if it is installed.
 */
function dpl_update_update_10010() : string {
  if (\Drupal::moduleHandler()->moduleExists('dpl_example_breadcrumb')) {
    \Drupal::service('module_installer')->uninstall(['dpl_example_breadcrumb']);
    return "Uninstalled dpl_example_breadcrumb module.";
  }
  return "dpl_example_breadcrumb module was not located. Skipped removal";
}

/**
 * Install health check module.
 */
function dpl_update_update_10011(): string {
  return _dpl_update_install_modules(['health_check']);
}

/**
 * Add translation of DKK currency suffix, for displaying event prices.
 */
function dpl_update_update_10012(): string {
  return _dpl_update_update_translation(' DKK', ' kr.', 'DPL event');
}


/**
 * Installing editor_advanced_link.
 */
function dpl_update_update_10013(): string {
  return _dpl_update_install_modules(['editor_advanced_link']);
}
