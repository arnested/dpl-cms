<?php

/**
 * @file
 * DPL Admin install file.
 */

use Safe\Exceptions\JsonException;
use function Safe\file_get_contents;
use function Safe\json_decode;
use function Safe\preg_match;

/**
 * Implements hook_requirements().
 *
 * Checks for the presence of a version file or a Git HEAD file and extracts
 * the version information accordingly. The retrieved version information is
 * then included as a requirement in the returned array.
 *
 * @remarks
 *   The .version file is created and updated automatically within the
 *   'Publish source' Git workflow. It stores version information that can
 *   be used to track and manage changes in the CMS.
 */
function dpl_admin_requirements(string $phase): array {
  $requirements = [];

  if ($phase === 'runtime') {
    $versionFile = DRUPAL_ROOT . '/../.version';
    $gitHeadFile = DRUPAL_ROOT . '/../.git/HEAD';
    $data = new stdClass();
    $version = "";

    // Check for the .version file, which exists only in deployed
    // environments, as it's generated by a GitHub workflow.
    if (file_exists($versionFile)) {
      try {
        $data = json_decode(file_get_contents($versionFile));
      }
      catch (JsonException $e) {
        $data->version = t('The ".version" file does not have a valid JSON format.');
      }

      $version = $data->version ?? t('The ".version" file does not contain information about the CMS version.');
    }
    else {
      // Check if the .git/HEAD file exists.
      if (file_exists($gitHeadFile)) {
        // Read current git branch name from .git/HEAD.
        $head = file_get_contents($gitHeadFile);
        if (preg_match('/ref: refs\/heads\/([^\n]+)/', $head, $matches)) {
          $version = $matches[1];
        }
      }
      else {
        $version = t('Not found, this could be due to this environment being a PR environment.');
      }
    }

    $requirements['dpl_admin_version'] = [
      'title' => t('CMS release version'),
      'value' => t('<code>@version</code>', ['@version' => $version]),
      'severity' => REQUIREMENT_INFO,
    ];
  }

  return $requirements;
}
