<?php

use Drupal\Core\Url;
use function Safe\parse_url;
use function Safe\preg_match;

/**
 * Implements hook_preprocess_HOOK() for paragraph templates.
 *
 * Add the base icon path to the variables array for use in paragraphs.
 */
function dpl_paragraphs_preprocess_paragraph(array &$variables): void {
  $baseIconPath = $variables['directory'] . '/assets/dpl-design-system/icons';
  $variables['baseIconPath'] = $baseIconPath;
}

/**
 * Implements hook_preprocess_paragraph__TYPE() for paragraph--links.html.twig.
 *
 * Prepares variables for paragraph--links.html.twig template.
 */
function dpl_paragraphs_preprocess_paragraph__links(array &$variables): void {

  $url_generator = \Drupal::service('url_generator');

  // Define the file extensions for downloadable files.
  $downloadable_file_extensions = 'pdf|docx|txt';

  // Generate base paths for predefined routes (search and advanced search).
  // Used to compare with the link URLs.
  $search_base_path = $url_generator->generateFromRoute('dpl_react_apps.search_result', [], ['absolute' => FALSE]);
  $advanced_search_base_path = $url_generator->generateFromRoute('dpl_react_apps.advanced_search', [], ['absolute' => FALSE]);

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->hasField('field_link') && !$paragraph->get('field_link')->isEmpty()) {

    $items = $paragraph->get('field_link')->getValue();
    $variables['links'] = [];

    foreach ($items as $item) {

      $url = Url::fromUri($item['uri']);

      // Normalize the URL to extract only the path, excluding query parameters.
      $normalized_path = rtrim(parse_url($url->toString(), PHP_URL_PATH), '/');

      // Default link type is 'internal'.
      $link_type = 'internal';

      if ($url->isExternal()) {
        // Check if the URL points to a downloadable file.
        if (preg_match('/\.(' . $downloadable_file_extensions . ')(\?.*)?$/', $normalized_path)) {
          $link_type = 'download';
        }
        else {
          // If it's not a file, classify it as an external link.
          $link_type = 'external';
        }
      }
      elseif ($normalized_path === $search_base_path || $normalized_path === $advanced_search_base_path) {
        // Check if the URL matches the search or advanced search paths.
        $link_type = 'search';
      }

      $linkIconClass = ($link_type === 'internal') ? 'rotate-180' : '';

      // Set the attributes based on the determined link type.
      $attributes = [
        'internal' => ['target' => '_self', 'iconFile' => 'ArrowBack', 'iconFolder' => 'collection'],
        'external' => ['target' => '_blank', 'iconFile' => 'icon-external-link', 'iconFolder' => 'basic'],
        'download' => ['target' => '_blank', 'iconFile' => 'Ebook', 'iconFolder' => 'collection'],
        'search' => ['target' => '_self', 'iconFile' => 'SearchBooks', 'iconFolder' => 'collection'],
      ][$link_type];

      $variables['links'][] = [
        'href' => $url->toString(),
        'linkText' => $item['title'],
        'linkType' => $link_type,
        'target' => $attributes['target'],
        'iconFile' => $attributes['iconFile'],
        'iconFolder' => $attributes['iconFolder'],
        'linkIconClass' => $linkIconClass,
      ];
    }
  }
}
