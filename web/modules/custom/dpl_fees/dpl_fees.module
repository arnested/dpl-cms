<?php

/**
 * @file
 * Dpl_fees drupal module file.
 *
 * Renders the fees list.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use function Safe\preg_match;

/**
 * Implements hook_dpl_react_apps_data().
 */
function dpl_fees_dpl_react_apps_data(array &$data): void {
  $data['urls'] += [
    'fee-page' => dpl_react_apps_ensure_url_is_string(
      Url::fromRoute('dpl_fees.list', [], ['absolute' => TRUE])->toString()
    ),
  ];
}

/**
 * Implements hook_dpl_react_apps_protected_nodes().
 */
function dpl_fees_dpl_react_apps_get_protected_nodes(): array {
  $form = \Drupal::formBuilder()->getForm('Drupal\dpl_fees\Form\FeesListSettingsForm');
  return dpl_fees_find_elements_of_type_linkit($form);
}

/**
 * Find elements of type linkit.
 *
 * @param array<mixed> $form
 *   An associative array containing the structure of the form.
 * @param array<mixed> $elements
 *   An associative array containing the structure of the form.
 *
 * @return array<mixed>
 *   An array containing linkit form element information.
 *
 * @throws \Safe\Exceptions\PcreException
 */
function dpl_fees_find_elements_of_type_linkit(array $form, array &$elements = []): array {
  // Get the configuration path.
  $config_path = Url::fromRoute('dpl_fees.settings', [], ['absolute' => TRUE])->toString();
  // Pattern to match node url e.g. /node/1.
  $pattern = '/^\/node\/\d+$/';

  foreach ($form as $key => $value) {

    if (is_array($value)) {
      if (isset($value['#type']) && $value['#type'] === 'linkit' && preg_match($pattern, $value['#default_value'])) {
        \Drupal::logger('dpl_react_apps')->warning('<pre><code>' . print_r($value['#type'], TRUE) . '</code></pre>');
        $elements[$key] = [
          'node_id' => basename($value['#default_value']),
          'config_title' => $value['#title'],
          'config_path' => $config_path,
        ];
      }
      else {
        dpl_fees_find_elements_of_type_linkit($value, $elements);
      }
    }
  }

  return $elements;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dpl_fees_form_dpl_library_agency_list_size_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\dpl_fees\DplFeesSettings $fees_settings */
  $fees_settings = \Drupal::service('dpl_fees.settings');

  $form['fees_list_size_settings'] = [
    '#type' => 'fieldset',
    '#title' => t('Fees list size settings', [], ['context' => 'List size (settings)']),
    '#description' => t('The number of items to display in the fees list.', [], ['context' => 'List size (settings)']),
    '#tree' => FALSE,
  ];

  $form['fees_list_size_settings']['fees_list_size_desktop'] = [
    '#type' => 'number',
    '#title' => t('Fees list size on desktop', [], ['context' => 'List size (settings)']),
    '#default_value' => $fees_settings->getListSizeDesktop(),
    '#min' => 1,
    '#step' => 1,
    '#required' => TRUE,
  ];

  $form['fees_list_size_settings']['fees_list_size_mobile'] = [
    '#type' => 'number',
    '#title' => t('Fees list size on mobile', [], ['context' => 'List size (settings)']),
    '#default_value' => $fees_settings->getListSizeMobile(),
    '#min' => 1,
    '#step' => 1,
    '#required' => TRUE,
  ];

  $form['#submit'][] = 'dpl_fees_handler_submit';
}

/**
 * Custom submit callback.
 *
 * @param array<mixed> $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function dpl_fees_handler_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\dpl_fees\DplFeesSettings $fees_settings */
  $fees_settings = \Drupal::service('dpl_fees.settings');

  \Drupal::service('config.factory')
    ->getEditable($fees_settings->getConfigKey())
    ->set('fees_list_size_desktop', $form_state->getValue('fees_list_size_desktop'))
    ->set('fees_list_size_mobile', $form_state->getValue('fees_list_size_mobile'))
    ->save();
}
